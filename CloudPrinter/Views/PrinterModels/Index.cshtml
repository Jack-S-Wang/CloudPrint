@model IEnumerable<CloudPrinter.Models.PrinterModels>

@{
    ViewBag.Title = "云打印主页";
}

<h2>云打印应用程序</h2>
@if (ViewBag.loginAccount.Equals(ViewBag.superAccount))
{
    <p>
        @Html.ActionLink("注册新打印机", "Create", new { userAccount = ViewBag.userAccount })
    </p>
}

<div>
    @Html.DisplayNameFor(model => model.printerNumber)
    <input type="text" class="text-left" id="number" />
    文件<input type="text" class="text-left" id="dataInfo" />
    <input type="file" id="files" style="display: none" onchange="fileImport(this.files[0]);">
    <input type="button" id="fileImport" value="导入">
    <input type="submit" value="打印" id="print" />
</div>
<table class="table" id="ptable">

    @Html.Partial("PerUserList")
   
</table>
<table class="table">
    <tr>
        <td>
            <input type="button" value="上一页" id="upTo" />
        </td>
        <td>
            <input type="button" value="下一页" id="nextTo" />
        </td>
    </tr>

</table>
<style>
    .overLa {
        cursor: pointer;
        text-decoration: underline;
    }

    .outLa {
        cursor: auto;
        text-decoration: none;
    }
    .lable{
        
    }
</style>
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script type="text/javascript">

    var isUpdatingPerUserList = false;

    $(function () {
        @*setInterval(function () {
            if (!isUpdatingPerUserList) {
                isUpdatingPerUserList = true;
                $.post('/PrinterModels/PerUserList', { "userAccount": "@Html.Raw(ViewBag.userAccount)" }, appTable);
            }
        }, 3000);*@


        $("#print").click(function () {
            print();
        }
                   );

        $("#upTo").click(function () {
            isUpdatingPerUserList = true;
            $.post('/PrinterModels/upToList', { "userAccount": "@Html.Raw(ViewBag.userAccount)" }, appTable);
        });
        $("#nextTo").click(function () {
            isUpdatingPerUserList = true;
            $.post('/PrinterModels/nextToList', { "userAccount": "@Html.Raw(ViewBag.userAccount)" }, appTable);
        });

    })

    function appTable(content) {
        //$(".printInfo").remove();
        $("#ptable").html(content);
        isUpdatingPerUserList = false;
    };

    function pnumber(number) {
        document.getElementById('number').value = number;
    }



    function print() {
        if ($('#dataInfo').val() == "") {
            alert("没有文件需要打印");
            return;
        }
        var formData = new FormData();
        formData.append('printerNumber', $('#number').val());
        formData.append('printDt', blob);
        $.ajax({
            url: '/API/SendHttp',
            type: 'POST',

            cache: false,//cache设置为false，上传文件不需要缓存
            processData: false,//data值是FormData对象，不需要对数据做处理
            contentType: false,//已经声明了属性enctype='multipart/form-data'，所以这里设置为false
            //enctype: 'multipart/form-data',
            data: formData,//FormData对象
            complete: function (xhr) {
                console.log('传输：', xhr)
            },
            success: function (ref) {
                alert(ref);
            },
            error: function (ref) {
                alert(ref);
            }
        })
    }
    $("#fileImport").click(function () {
        $("#files").click();
    })

    var blob;
    function fileImport(selectedFile) {
        var b = {
            dataURItoBuffer: function (dataURI) {
                var byteString = atob(dataURI.split(',')[1])
                    , buffer = new ArrayBuffer(byteString.length)
                    , view = new Uint8Array(buffer)
                ;
                for (var i = 0; i < byteString.length; i++) {
                    view[i] = byteString.charCodeAt(i);
                }
                return buffer;
            },
            dataURItoBlob: function (dataURI) {
                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                var buffer = this.dataURItoBuffer(dataURI);
                return new Blob([buffer], { type: mimeString });
            }
        }
        //获取读取我文件的File对象
        var name = selectedFile.name;//读取选中文件的文件名
        var size = selectedFile.size;//读取选中文件的大小
        document.getElementById("dataInfo").value = name;
        var reader = new FileReader();//这是核心,读取操作就是由它完成.
        //reader.readAsText(selectedFile);//读取文件的内容,也可以读取文件的URL
        //reader.readAsArrayBuffer(selectedFile);
        reader.addEventListener("loadend", function (e) {
            alert("huoqu");
            //当读取完成后回调这个函数,然后此时文件的内容存储到了result中,直接操作即可
            blob = b.dataURItoBlob(e.target.result);
        })
        reader.readAsDataURL(selectedFile);
    }


</script>
